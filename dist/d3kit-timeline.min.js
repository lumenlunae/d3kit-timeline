!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3kit"),require("d3-array"),require("d3-axis"),require("labella"),require("d3-scale"),require("d3-transition")):"function"==typeof define&&define.amd?define(["d3kit","d3-array","d3-axis","labella","d3-scale","d3-transition"],e):"object"==typeof exports?exports.d3KitTimeline=e(require("d3kit"),require("d3-array"),require("d3-axis"),require("labella"),require("d3-scale"),require("d3-transition")):t.d3KitTimeline=e(t.d3Kit,t.d3,t.d3,t.labella,t.d3,t.d3)}(window,function(t,e,n,r,o,a){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e){t.exports=r},function(t,e){t.exports=o},function(t,e,n){t.exports=n(6)},function(t,e,n){"use strict";n.r(e);var r=n(2),o=n(4),a=(n(7),n(1)),i=n(0),s=n(3),l=n.n(s),u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var c=function(t){return t.w},f=function(t){return t.h},d=function(t){return t},h=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return r.layers.create(["dummy",{main:["axis","link","label","dot"]}]),r.layers.get("main/axis").classed("axis",!0),r.force=new l.a.Force(n.labella),r.updateLabelText=r.updateLabelText.bind(r),r.visualize=r.visualize.bind(r),r.on("data",r.visualize),r.on("options",r.visualize),r.on("resize",r.visualize),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i["SvgChart"]),u(e,null,[{key:"getDefaultOptions",value:function(){return i.helper.deepExtend(function t(e,n,r){null===e&&(e=Function.prototype);var o=Object.getOwnPropertyDescriptor(e,n);if(void 0===o){var a=Object.getPrototypeOf(e);return null===a?void 0:t(a,n,r)}if("value"in o)return o.value;var i=o.get;return void 0!==i?i.call(r):void 0}(e.__proto__||Object.getPrototypeOf(e),"getDefaultOptions",this).call(this),{margin:{left:40,right:20,top:20,bottom:20},initialWidth:400,initialHeight:400,scale:Object(o.scaleTime)(),domain:void 0,direction:"right",dotRadius:3,formatAxis:d,layerGap:60,labella:{},keyFn:void 0,timeFn:function(t){return t.time},endTimeFn:function(t){return t.end_time},textFn:function(t){return t.text},offsetFn:function(t){return t.offset},offsetTangentFn:function(t){return t.offsetTangent},textOffsetFn:function(t){return t.textOffset},endDotColor:"#009900",dotColor:"#222",labelBgColor:"#222",labelTextColor:"#fff",lineColor:"#222",linkColor:"#222",labelPadding:{left:4,right:4,top:3,bottom:2},textYOffset:"0.85em"})}},{key:"getCustomEventNames",value:function(){return["dotClick","dotMouseover","dotMousemove","dotMouseout","dotMouseenter","dotMouseleave","labelClick","labelMouseover","labelMousemove","labelMouseenter","labelMouseleave","labelMouseout"]}}]),u(e,[{key:"resizeToFit",value:function(){var t=this.options(),e=void 0,n=this.force.nodes();switch(t.direction){case"up":e=Object(a.max)(n,function(t){return Math.abs(t.y)})||0,this.height(e+t.margin.top+t.margin.bottom);break;case"down":e=Object(a.max)(n,function(t){return Math.abs(t.y+t.dy)})||0,this.height(e+t.margin.top+t.margin.bottom);break;case"left":e=Object(a.max)(n,function(t){return Math.abs(t.x)})||0,this.width(e+t.margin.left+t.margin.right);break;case"right":e=Object(a.max)(n,function(t){return Math.abs(t.x+t.dx)})||0,this.width(e+t.margin.left+t.margin.right)}return this}},{key:"updateLabelText",value:function(t,e,n){var r=this.options();return n=n?i.helper.functor(n):d,t.text(function(t){return r.textFn(n(t))}).attr("dy",r.textYOffset).attr("x",r.labelPadding.left).attr("y",r.labelPadding.top),Object.keys(e).forEach(function(r){var o=e[r];t.style(r,function(t,e){return o(n(t),e)})}),t}},{key:"drawAxes",value:function(){var t=this.options(),e=void 0;switch(t.direction){case"right":this.axis=Object(r.axisLeft)(),e="translate(0,0)";break;case"left":this.axis=Object(r.axisRight)(),e="translate("+this.getInnerWidth()+",0)";break;case"up":this.axis=Object(r.axisBottom)(),e="translate(0,"+this.getInnerHeight()+")";break;case"down":this.axis=Object(r.axisTop)(),e="translate(0,0)"}return this.layers.get("main").attr("transform",e),(t.formatAxis||d)(this.axis.scale(t.scale)),this.layers.get("main/axis").call(this.axis),this}},{key:"drawDots",value:function(t){var e=this.options(),n=function(t){return e.scale(e.timeFn(t))},r=this.layers.get("main/dot").selectAll("circle.dot").data(t,e.keyFn),o="left"===e.direction||"right"===e.direction?"cy":"cx",a="cy"===o?"cx":"cy",i="cy"===o?"x":"y",s="cy"===o?"y":"x";if("transparent"===e.dotColor?(r.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return n(t)+e.offsetTangentFn(t)}).attr("width",e.dotRadius).attr("height",1),r.transition().style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return n(t)+e.offsetTangentFn(t)}).attr("width",e.dotRadius).attr("height",1)):(r.enter().append("circle").classed("dot",!0).on("click",this.dispatchAs("dotClick")).on("mouseover",this.dispatchAs("dotMouseover")).on("mousemove",this.dispatchAs("dotMousemove")).on("mouseout",this.dispatchAs("dotMouseout")).on("mouseenter",this.dispatchAs("dotMouseenter")).on("mouseleave",this.dispatchAs("dotMouseleave")).style("fill",e.dotColor).attr("r",e.dotRadius).attr(o,function(t){return n(t)+e.offsetTangentFn(t)}).attr(a,function(t){return e.offsetFn(t)}),r.transition().style("fill",e.dotColor).attr("r",e.dotRadius).attr(o,function(t){return n(t)+e.offsetTangentFn(t)}).attr(a,function(t){return e.offsetFn(t)})),e.endTimeFn){var l=function(t){return e.scale(e.endTimeFn(t))};"transparent"===e.endDotColor?(r.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return l(t)+e.offsetTangentFn(t)}).attr("width",e.dotRadius).attr("height",1),r.transition().style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return l(t)+e.offsetTangentFn(t)}).attr("width",e.dotRadius).attr("height",1)):(r.enter().append("circle").classed("dot",!0).style("fill",e.endDotColor).attr("r",e.dotRadius).attr(o,function(t){return l(t)+e.offsetTangentFn(t)}).attr(a,function(t){return e.offsetFn(t)}),r.transition().style("fill",e.endDotColor).attr("r",e.dotRadius).attr(o,function(t){return l(t)+e.offsetTangentFn(t)}).attr(a,function(t){return e.offsetFn(t)})),r.enter().append("rect").classed("time-duration",!0).style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return n(t)+e.offsetTangentFn(t)}).attr("width",1).attr("height",function(t){return l(t)-n(t)}),r.transition().style("stroke",e.lineColor).attr(i,function(t){return e.offsetFn(t)}).attr(s,function(t){return n(t)+e.offsetTangentFn(t)}).attr("width",1).attr("height",function(t){return l(t)-n(t)})}return r.exit().remove(),this}},{key:"drawLabels",value:function(t,e){var n=this.options(),r=void 0;r="left"===n.direction||"right"===n.direction?Object(a.max)(t,c):Object(a.max)(t,f);var o=new l.a.Renderer({nodeHeight:r,layerGap:n.layerGap,direction:n.direction});function s(t){var e=n.offsetFn(t.data),o=n.offsetTangentFn(t.data)+n.textOffsetFn(t.data);switch(n.direction){case"right":return"translate("+(t.x+e)+","+(o+t.y-t.dy/2)+")";case"left":return"translate("+(t.x+r-t.w-e)+","+(o+t.y-t.dy/2)+")";case"up":return"translate("+(o+t.x-t.dx/2)+","+(t.y+e)+")";case"down":return"translate("+(o+t.x-t.dx/2)+","+(t.y-e)+")"}}o.layout(t);var u=i.helper.functor(n.labelBgColor),d=i.helper.functor(n.linkColor),h=this.layers.get("main/label").selectAll("g.label-g").data(t,n.keyFn?function(t){return n.keyFn(t.data)}:void 0),p=h.enter().append("g").classed("label-g",!0).on("click",this.dispatchAs("labelClick")).on("mouseover",this.dispatchAs("labelMouseover")).on("mousemove",this.dispatchAs("labelMousemove")).on("mouseenter",this.dispatchAs("labelMouseenter")).on("mouseleave",this.dispatchAs("labelMouseleave")).on("mouseout",this.dispatchAs("labelMouseout")).attr("transform",s);p.append("rect").classed("label-bg",!0).attr("rx",2).attr("ry",2).attr("width",c).attr("height",f).style("fill",function(t){return u(t.data)}),p.append("text").classed("label-text",!0).call(this.updateLabelText,e,function(t){return t.data});var b=h.transition().attr("transform",s);b.select("rect").attr("width",c).attr("height",f).style("fill",function(t){return u(t.data)}),b.select("text.label-text").call(this.updateLabelText,e,function(t){return t.data}),h.exit().remove();var g=this.layers.get("main/link").selectAll("path.link").data(t,n.keyFn?function(t){return n.keyFn(t.data)}:void 0);return g.enter().append("path").classed("link",!0).attr("d",function(t){return o.generatePath(t)}).style("stroke",function(t){return d(t.data)}).style("fill","none").attr("transform",function(t){var e=n.offsetFn(t.data),r=n.offsetTangentFn(t.data);return"left"===n.direction||"right"===n.direction?"translate("+e+", "+r+")":"translate("+r+", "+e+")"}),g.transition().attr("d",function(t){return o.generatePath(t)}).style("stroke",function(t){return d(t.data)}).attr("transform",function(t){var e=n.offsetFn(t.data),r=n.offsetTangentFn(t.data);return"left"===n.direction||"right"===n.direction?"translate("+e+", "+r+")":"translate("+r+", "+e+")"}),g.exit().remove(),this}},{key:"visualize",value:function(){var t=this;if(this.hasData()&&this.hasNonZeroArea()){var e=this.data()||[],n=this.options();this.force=new l.a.Force(n.labella),n.domain?n.scale.domain(n.domain):n.scale.domain(Object(a.extent)(e,n.timeFn)).nice(),n.scale.range([0,"left"===n.direction||"right"===n.direction?this.getInnerHeight():this.getInnerWidth()]);var r=i.helper.extend({},n.textStyle);Object.keys(r).forEach(function(t){r[t]=i.helper.functor(r[t])}),r.fill=r.fill||i.helper.functor(n.labelTextColor);var o=this.layers.get("dummy").append("text").classed("label-text",!0),s=e.map(function(e){var a=o.call(t.updateLabelText,r,e).node().getBBox(),i=a.width+n.labelPadding.left+n.labelPadding.right,s=a.height+n.labelPadding.top+n.labelPadding.bottom,u=new l.a.Node(function(t){return n.scale(n.timeFn(t))}(e),"left"===n.direction||"right"===n.direction?s:i,e);return u.w=i,u.h=s,u});return o.remove(),this.force.options(n.labella).nodes(s).compute(),console.log(s),this.drawAxes(),this.drawDots(e),this.drawLabels(this.force.nodes(),r),this}}}]),e}();e.default=h},function(t,e){t.exports=a}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,