!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3kit"),require("d3-array"),require("d3-axis"),require("labella"),require("d3-scale"),require("d3-transition")):"function"==typeof define&&define.amd?define(["d3kit","d3-array","d3-axis","labella","d3-scale","d3-transition"],e):"object"==typeof exports?exports.d3KitTimeline=e(require("d3kit"),require("d3-array"),require("d3-axis"),require("labella"),require("d3-scale"),require("d3-transition")):t.d3KitTimeline=e(t.d3Kit,t.d3,t.d3,t.labella,t.d3,t.d3)}(window,function(t,e,a,i,o,s){return function(t){var e={};function a(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,a),o.l=!0,o.exports}return a.m=t,a.c=e,a.d=function(t,e,i){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)a.d(i,o,function(e){return t[e]}.bind(null,o));return i},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=5)}([function(e,a){e.exports=t},function(t,a){t.exports=e},function(t,e){t.exports=a},function(t,e){t.exports=i},function(t,e){t.exports=o},function(t,e,a){t.exports=a(6)},function(t,e,a){"use strict";a.r(e);var i=a(2),o=a(4),s=(a(7),a(1)),n=a(0),r=a(3),l=a.n(r);const d=t=>t.w,c=t=>t.h,f=t=>t;e.default=class extends n.SvgChart{static getDefaultOptions(){return n.helper.deepExtend(super.getDefaultOptions(),{margin:{left:40,right:20,top:20,bottom:20},initialWidth:400,initialHeight:400,scale:Object(o.scaleTime)(),domain:void 0,direction:"right",dotRadius:3,formatAxis:f,layerGap:60,labella:{},keyFn:void 0,timeFn:t=>t.time,endTimeFn:t=>t.end_time,textFn:t=>t.text,offsetFn:t=>t.offset,offsetTangentFn:t=>t.offsetTangent,textOffsetFn:t=>t.textOffset,endDotColor:"#009900",dotColor:"#222",labelBgColor:"#222",labelTextColor:"#fff",lineColor:"#222",linkColor:"#222",labelPadding:{left:4,right:4,top:3,bottom:2},textYOffset:"0.85em"})}static getCustomEventNames(){return["dotClick","dotMouseover","dotMousemove","dotMouseout","dotMouseenter","dotMouseleave","labelClick","labelMouseover","labelMousemove","labelMouseenter","labelMouseleave","labelMouseout"]}constructor(t,e){super(t,e),this.layers.create(["dummy",{main:["axis","link","label","dot"]}]),this.layers.get("main/axis").classed("axis",!0),this.force=new l.a.Force(e.labella),this.updateLabelText=this.updateLabelText.bind(this),this.visualize=this.visualize.bind(this),this.on("data",this.visualize),this.on("options",this.visualize),this.on("resize",this.visualize)}resizeToFit(){const t=this.options();let e;const a=this.force.nodes();switch(t.direction){case"up":e=Object(s.max)(a,t=>Math.abs(t.y))||0,this.height(e+t.margin.top+t.margin.bottom);break;case"down":e=Object(s.max)(a,t=>Math.abs(t.y+t.dy))||0,this.height(e+t.margin.top+t.margin.bottom);break;case"left":e=Object(s.max)(a,t=>Math.abs(t.x))||0,this.width(e+t.margin.left+t.margin.right);break;case"right":e=Object(s.max)(a,t=>Math.abs(t.x+t.dx))||0,this.width(e+t.margin.left+t.margin.right)}return this}updateLabelText(t,e,a){const i=this.options();return a=a?n.helper.functor(a):f,t.text(t=>i.textFn(a(t))).attr("dy",i.textYOffset).attr("x",i.labelPadding.left).attr("y",i.labelPadding.top),Object.keys(e).forEach(i=>{const o=e[i];t.style(i,(t,e)=>o(a(t),e))}),t}drawAxes(){const t=this.options();let e;switch(t.direction){case"right":this.axis=Object(i.axisLeft)(),e="translate(0,0)";break;case"left":this.axis=Object(i.axisRight)(),e=`translate(${this.getInnerWidth()},0)`;break;case"up":this.axis=Object(i.axisBottom)(),e=`translate(0,${this.getInnerHeight()})`;break;case"down":this.axis=Object(i.axisTop)(),e="translate(0,0)"}return this.layers.get("main").attr("transform",e),(t.formatAxis||f)(this.axis.scale(t.scale)),this.layers.get("main/axis").call(this.axis),this}drawDots(t){const e=this.options(),a=t=>e.scale(e.timeFn(t)),i=this.layers.get("main/dot").selectAll("circle.dot").data(t,e.keyFn),o="left"===e.direction||"right"===e.direction?"cy":"cx",s="cy"===o?"cx":"cy",n="cy"===o?"x":"y",r="cy"===o?"y":"x";if("transparent"===e.dotColor?(i.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,t=>a(t)+e.offsetTangentFn(t)).attr("width",e.dotRadius).attr("height",1),i.transition().style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,t=>a(t)+e.offsetTangentFn(t)).attr("width",e.dotRadius).attr("height",1)):(i.enter().append("circle").classed("dot",!0).on("click",this.dispatchAs("dotClick")).on("mouseover",this.dispatchAs("dotMouseover")).on("mousemove",this.dispatchAs("dotMousemove")).on("mouseout",this.dispatchAs("dotMouseout")).on("mouseenter",this.dispatchAs("dotMouseenter")).on("mouseleave",this.dispatchAs("dotMouseleave")).style("fill",e.dotColor).attr("r",e.dotRadius).attr(o,t=>a(t)+e.offsetTangentFn(t)).attr(s,t=>e.offsetFn(t)),i.transition().style("fill",e.dotColor).attr("r",e.dotRadius).attr(o,t=>a(t)+e.offsetTangentFn(t)).attr(s,t=>e.offsetFn(t))),e.endTimeFn){const t=t=>e.scale(e.endTimeFn(t));"transparent"===e.endDotColor?(i.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,a=>t(a)+e.offsetTangentFn(a)).attr("width",e.dotRadius).attr("height",1),i.transition().style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,a=>t(a)+e.offsetTangentFn(a)).attr("width",e.dotRadius).attr("height",1)):(i.enter().append("circle").classed("dot",!0).style("fill",e.endDotColor).attr("r",e.dotRadius).attr(o,a=>t(a)+e.offsetTangentFn(a)).attr(s,t=>e.offsetFn(t)),i.transition().style("fill",e.endDotColor).attr("r",e.dotRadius).attr(o,a=>t(a)+e.offsetTangentFn(a)).attr(s,t=>e.offsetFn(t))),i.enter().append("rect").classed("time-duration",!0).style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,t=>a(t)+e.offsetTangentFn(t)).attr("width",1).attr("height",e=>t(e)-a(e)),i.transition().style("stroke",e.lineColor).attr(n,t=>e.offsetFn(t)).attr(r,t=>a(t)+e.offsetTangentFn(t)).attr("width",1).attr("height",e=>t(e)-a(e))}return i.exit().remove(),this}drawLabels(t,e){const a=this.options();let i;i="left"===a.direction||"right"===a.direction?Object(s.max)(t,d):Object(s.max)(t,c);const o=new l.a.Renderer({nodeHeight:i,layerGap:a.layerGap,direction:a.direction});function r(t){const e=a.offsetFn(t.data),o=a.offsetTangentFn(t.data)+a.textOffsetFn(t.data);switch(a.direction){case"right":return`translate(${t.x+e},${o+t.y-t.dy/2})`;case"left":return`translate(${t.x+i-t.w-e},${o+t.y-t.dy/2})`;case"up":return`translate(${o+t.x-t.dx/2},${t.y+e})`;case"down":return`translate(${o+t.x-t.dx/2},${t.y-e})`}}o.layout(t);const f=n.helper.functor(a.labelBgColor),h=n.helper.functor(a.linkColor),u=this.layers.get("main/label").selectAll("g.label-g").data(t,a.keyFn?t=>a.keyFn(t.data):void 0),p=u.enter().append("g").classed("label-g",!0).on("click",this.dispatchAs("labelClick")).on("mouseover",this.dispatchAs("labelMouseover")).on("mousemove",this.dispatchAs("labelMousemove")).on("mouseenter",this.dispatchAs("labelMouseenter")).on("mouseleave",this.dispatchAs("labelMouseleave")).on("mouseout",this.dispatchAs("labelMouseout")).attr("transform",r);p.append("rect").classed("label-bg",!0).attr("rx",2).attr("ry",2).attr("width",d).attr("height",c).style("fill",t=>f(t.data)),p.append("text").classed("label-text",!0).call(this.updateLabelText,e,t=>t.data);const b=u.transition().attr("transform",r);b.select("rect").attr("width",d).attr("height",c).style("fill",t=>f(t.data)),b.select("text.label-text").call(this.updateLabelText,e,t=>t.data),u.exit().remove();const g=this.layers.get("main/link").selectAll("path.link").data(t,a.keyFn?t=>a.keyFn(t.data):void 0);return g.enter().append("path").classed("link",!0).attr("d",t=>o.generatePath(t)).style("stroke",t=>h(t.data)).style("fill","none").attr("transform",t=>{const e=a.offsetFn(t.data),i=a.offsetTangentFn(t.data);return"left"===a.direction||"right"===a.direction?`translate(${e}, ${i})`:`translate(${i}, ${e})`}),g.transition().attr("d",t=>o.generatePath(t)).style("stroke",t=>h(t.data)).attr("transform",t=>{const e=a.offsetFn(t.data),i=a.offsetTangentFn(t.data);return"left"===a.direction||"right"===a.direction?`translate(${e}, ${i})`:`translate(${i}, ${e})`}),g.exit().remove(),this}visualize(){if(!this.hasData()||!this.hasNonZeroArea())return;const t=this.data()||[],e=this.options();this.force=new l.a.Force(e.labella),e.domain?e.scale.domain(e.domain):e.scale.domain(Object(s.extent)(t,e.timeFn)).nice(),e.scale.range([0,"left"===e.direction||"right"===e.direction?this.getInnerHeight():this.getInnerWidth()]);const a=n.helper.extend({},e.textStyle);Object.keys(a).forEach(t=>{a[t]=n.helper.functor(a[t])}),a.fill=a.fill||n.helper.functor(e.labelTextColor);const i=this.layers.get("dummy").append("text").classed("label-text",!0),o=t.map(t=>{const o=i.call(this.updateLabelText,a,t).node().getBBox(),s=o.width+e.labelPadding.left+e.labelPadding.right,n=o.height+e.labelPadding.top+e.labelPadding.bottom,r=new l.a.Node((t=>e.scale(e.timeFn(t)))(t),"left"===e.direction||"right"===e.direction?n:s,t);return r.w=s,r.h=n,r});return i.remove(),this.force.options(e.labella).nodes(o).compute(),console.log(o),this.drawAxes(),this.drawDots(t),this.drawLabels(this.force.nodes(),a),this}}},function(t,e){t.exports=s}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,