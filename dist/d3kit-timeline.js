!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-selection"),require("d3-array"),require("d3kit"),require("labella"),require("d3-axis"),require("d3-scale"),require("d3-dispatch"),require("d3-transition")):"function"==typeof define&&define.amd?define(["d3-selection","d3-array","d3kit","labella","d3-axis","d3-scale","d3-dispatch","d3-transition"],e):"object"==typeof exports?exports.d3KitTimeline=e(require("d3-selection"),require("d3-array"),require("d3kit"),require("labella"),require("d3-axis"),require("d3-scale"),require("d3-dispatch"),require("d3-transition")):t.d3KitTimeline=e(t.d3,t.d3,t.d3Kit,t.labella,t.d3,t.d3,t.d3,t.d3)}(window,function(t,e,n,a,r,i,o,s){return function(t){var e={};function n(a){if(e[a])return e[a].exports;var r=e[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(a,r,function(e){return t[e]}.bind(null,r));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e){t.exports=a},function(t,e){t.exports=r},function(t,e){t.exports=i},function(t,e){t.exports=o},function(t,e,n){t.exports=n(9)},function(t,e){t.exports=s},function(t,e,n){"use strict";n.r(e);var a=n(4),r=n(5),i=n(6),o=n(0);function s(){o.event.stopImmediatePropagation()}var l=function(){o.event.preventDefault(),o.event.stopImmediatePropagation()},d=function(t){var e=t.document.documentElement,n=Object(o.select)(t).on("dragstart.drag",l,!0);"onselectstart"in e?n.on("selectstart.drag",l,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};var c=function(t){return function(){return t}};function u(t,e,n,a,r,i,o,s,l,d){this.target=t,this.type=e,this.subject=n,this.identifier=a,this.active=r,this.x=i,this.y=o,this.dx=s,this.dy=l,this._=d}function f(){return!o.event.button}function h(){return this.parentNode}function p(t){return null==t?{x:o.event.x,y:o.event.y}:t}function g(){return"ontouchstart"in this}u.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var y=function(){var t,e,n,a,r=f,y=h,m=p,b=g,x={},v=Object(i.dispatch)("start","drag","end"),F=0,k=0;function w(t){t.on("mousedown.drag",T).filter(b).on("touchstart.drag",C).on("touchmove.drag",M).on("touchend.drag touchcancel.drag",$).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function T(){if(!a&&r.apply(this,arguments)){var i=A("mouse",y.apply(this,arguments),o.mouse,this,arguments);i&&(Object(o.select)(o.event.view).on("mousemove.drag",O,!0).on("mouseup.drag",j,!0),d(o.event.view),s(),n=!1,t=o.event.clientX,e=o.event.clientY,i("start"))}}function O(){if(l(),!n){var a=o.event.clientX-t,r=o.event.clientY-e;n=a*a+r*r>k}x.mouse("drag")}function j(){var t,e,a,r;Object(o.select)(o.event.view).on("mousemove.drag mouseup.drag",null),t=o.event.view,e=n,a=t.document.documentElement,r=Object(o.select)(t).on("dragstart.drag",null),e&&(r.on("click.drag",l,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in a?r.on("selectstart.drag",null):(a.style.MozUserSelect=a.__noselect,delete a.__noselect),l(),x.mouse("end")}function C(){if(r.apply(this,arguments)){var t,e,n=o.event.changedTouches,a=y.apply(this,arguments),i=n.length;for(t=0;t<i;++t)(e=A(n[t].identifier,a,o.touch,this,arguments))&&(s(),e("start"))}}function M(){var t,e,n=o.event.changedTouches,a=n.length;for(t=0;t<a;++t)(e=x[n[t].identifier])&&(l(),e("drag"))}function $(){var t,e,n=o.event.changedTouches,r=n.length;for(a&&clearTimeout(a),a=setTimeout(function(){a=null},500),t=0;t<r;++t)(e=x[n[t].identifier])&&(s(),e("end"))}function A(t,e,n,a,r){var i,s,l,d=n(e,t),c=v.copy();if(Object(o.customEvent)(new u(w,"beforestart",i,t,F,d[0],d[1],0,0,c),function(){return null!=(o.event.subject=i=m.apply(a,r))&&(s=i.x-d[0]||0,l=i.y-d[1]||0,!0)}))return function f(h){var p,g=d;switch(h){case"start":x[t]=f,p=F++;break;case"end":delete x[t],--F;case"drag":d=n(e,t),p=F}Object(o.customEvent)(new u(w,h,i,t,p,d[0]+s,d[1]+l,d[0]-g[0],d[1]-g[1],c),c.apply,c,[h,a,r])}}return w.filter=function(t){return arguments.length?(r="function"==typeof t?t:c(!!t),w):r},w.container=function(t){return arguments.length?(y="function"==typeof t?t:c(t),w):y},w.subject=function(t){return arguments.length?(m="function"==typeof t?t:c(t),w):m},w.touchable=function(t){return arguments.length?(b="function"==typeof t?t:c(!!t),w):b},w.on=function(){var t=v.on.apply(v,arguments);return t===v?w:t},w.clickDistance=function(t){return arguments.length?(k=(t=+t)*t,w):Math.sqrt(k)},w},m=(n(8),n(1)),b=n(2),x=n(3),v=n.n(x);const F=t=>t.w,k=t=>t.h,w=t=>t;e.default=class extends b.SvgChart{static getDefaultOptions(){return b.helper.deepExtend(super.getDefaultOptions(),{margin:{left:40,right:20,top:20,bottom:20},initialWidth:400,initialHeight:400,scale:Object(r.scaleTime)(),domain:void 0,direction:"right",dotRadius:3,formatAxis:w,layerGap:60,layerGapFn:void 0,labella:{},keyFn:void 0,timeFn:t=>t.time,endTimeFn:t=>t.endTime,textFn:t=>t.text,offsetFn:t=>t.offset,offsetTangentFn:t=>t.offsetTangent,textOffsetFn:t=>t.textOffset,endDotColor:"#009900",dotColor:"#222",labelBgColor:"#222",labelTextColor:"#fff",lineColor:"#222",linkColor:"#222",labelPadding:{left:4,right:4,top:3,bottom:2},textYOffset:"0.85em"})}static getCustomEventNames(){return["dotClick","dotMouseover","dotMousemove","dotMouseout","dotMouseenter","dotMouseleave","labelClick","labelMouseover","labelMousemove","labelMouseenter","labelMouseleave","labelMouseout","labelDrag","labelDragStart","labelDragEnd"]}constructor(t,e){super(t,e),this.layers.create(["dummy",{main:["axis","link","dot","label"]}]),this.layers.get("main/axis").classed("axis",!0),this.force=new v.a.Force(e.labella),this.updateLabelText=this.updateLabelText.bind(this),this.visualize=this.visualize.bind(this),this.on("data",this.visualize),this.on("resize",this.visualize)}resizeToFit(){const t=this.options();let e;const n=this.force.nodes();switch(t.direction){case"up":e=Object(m.max)(n,t=>Math.abs(t.y))||0,this.height(e+t.margin.top+t.margin.bottom);break;case"down":e=Object(m.max)(n,t=>Math.abs(t.y+t.dy))||0,this.height(e+t.margin.top+t.margin.bottom);break;case"left":e=Object(m.max)(n,t=>Math.abs(t.x))||0,this.width(e+t.margin.left+t.margin.right);break;case"right":e=Object(m.max)(n,t=>Math.abs(t.x+t.dx))||0,this.width(e+t.margin.left+t.margin.right)}return this}updateLabelText(t,e,n){const a=this.options();return n=n?b.helper.functor(n):w,t.text(t=>a.textFn(n(t))).attr("dy",a.textYOffset).attr("x",a.labelPadding.left).attr("y",a.labelPadding.top),Object.keys(e).forEach(a=>{const r=e[a];t.style(a,(t,e)=>r(n(t),e))}),t}drawAxes(){const t=this.options();let e;switch(t.direction){case"right":this.axis=Object(a.axisLeft)(),e="translate(0,0)";break;case"left":this.axis=Object(a.axisRight)(),e=`translate(${this.getInnerWidth()},0)`;break;case"up":this.axis=Object(a.axisBottom)(),e=`translate(0,${this.getInnerHeight()})`;break;case"down":this.axis=Object(a.axisTop)(),e="translate(0,0)"}return this.layers.get("main").attr("transform",e),(t.formatAxis||w)(this.axis.scale(t.scale)),this.layers.get("main/axis").call(this.axis),this}drawDots(t){const e=this.options(),n=t=>e.scale(e.timeFn(t)),a=this.layers.get("main/dot").selectAll("circle.dot").data(t,e.keyFn),r="left"===e.direction||"right"===e.direction?"cy":"cx",i="cy"===r?"cx":"cy",o="cy"===r?"x":"y",s="cy"===r?"y":"x";if("transparent"===e.dotColor?(a.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,t=>n(t)+e.offsetTangentFn(t)).attr("width",e.dotRadius).attr("height",1),a.transition().style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,t=>n(t)+e.offsetTangentFn(t)).attr("width",e.dotRadius).attr("height",1)):(a.enter().append("circle").classed("dot",!0).on("click",this.dispatchAs("dotClick")).on("mouseover",this.dispatchAs("dotMouseover")).on("mousemove",this.dispatchAs("dotMousemove")).on("mouseout",this.dispatchAs("dotMouseout")).on("mouseenter",this.dispatchAs("dotMouseenter")).on("mouseleave",this.dispatchAs("dotMouseleave")).style("fill",e.dotColor).attr("r",e.dotRadius).attr(r,t=>n(t)+e.offsetTangentFn(t)).attr(i,t=>e.offsetFn(t)),a.transition().style("fill",e.dotColor).attr("r",e.dotRadius).attr(r,t=>n(t)+e.offsetTangentFn(t)).attr(i,t=>e.offsetFn(t))),e.endTimeFn){const t=t=>e.scale(e.endTimeFn(t));"transparent"===e.endDotColor?(a.enter().append("rect").classed("dot",!0).style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,n=>t(n)+e.offsetTangentFn(n)).attr("width",e.dotRadius).attr("height",1),a.transition().style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,n=>t(n)+e.offsetTangentFn(n)).attr("width",e.dotRadius).attr("height",1)):(a.enter().append("circle").classed("dot",!0).style("fill",e.endDotColor).attr("r",e.dotRadius).attr(r,n=>t(n)+e.offsetTangentFn(n)).attr(i,t=>e.offsetFn(t)),a.transition().style("fill",e.endDotColor).attr("r",e.dotRadius).attr(r,n=>t(n)+e.offsetTangentFn(n)).attr(i,t=>e.offsetFn(t))),a.enter().append("rect").classed("time-duration",!0).style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,t=>n(t)+e.offsetTangentFn(t)).attr("width",1).attr("height",e=>t(e)-n(e)),a.transition().style("stroke",e.lineColor).attr(o,t=>e.offsetFn(t)).attr(s,t=>n(t)+e.offsetTangentFn(t)).attr("width",1).attr("height",e=>t(e)-n(e))}return a.exit().remove(),this}drawLabels(t,e){const n=this.options();let a;function r(t){const e=n.offsetFn(t.data),r=n.offsetTangentFn(t.data)+n.textOffsetFn(t.data);switch(n.direction){case"right":return`translate(${t.x+e},${r+t.y-t.dy/2})`;case"left":return`translate(${t.x+a-t.w-e},${r+t.y-t.dy/2})`;case"up":return`translate(${r+t.x-t.dx/2},${t.y+e})`;case"down":return`translate(${r+t.x-t.dx/2},${t.y-e})`}}a="left"===n.direction||"right"===n.direction?Object(m.max)(t,F):Object(m.max)(t,k),new v.a.Renderer({nodeHeight:a,layerGap:n.layerGap,layerGapFn:n.layerGapFn,direction:n.direction}).layout(t);const i=b.helper.functor(n.labelBgColor),o=(b.helper.functor(n.linkColor),this.layers.get("main/label").selectAll("g.label-g").data(t,n.keyFn?t=>n.keyFn(t.data):void 0)),s=o.enter().append("g").classed("label-g",!0).attr("transform",r).call(y().on("start",this.dispatchAs("labelDragStart")).on("end",this.dispatchAs("labelDragEnd")).on("drag",this.dispatchAs("labelDrag")));s.append("rect").classed("label-bg",!0).attr("rx",2).attr("ry",2).attr("width",F).attr("height",k).style("fill",t=>i(t.data)),s.append("text").classed("label-text",!0).call(this.updateLabelText,e,t=>t.data);const l=o.transition().attr("transform",r);return l.select("rect").attr("width",F).attr("height",k).style("fill",t=>i(t.data)),l.select("text.label-text").call(this.updateLabelText,e,t=>t.data),o.exit().remove(),this}drawLink(t){const e=this.options();let n;n="left"===e.direction||"right"===e.direction?Object(m.max)(t,F):Object(m.max)(t,k);const a=new v.a.Renderer({nodeHeight:n,layerGap:e.layerGap,layerGapFn:e.layerGapFn,direction:e.direction}),r=e.linkColor,i=this.layers.get("main/link").selectAll("path.link").data(t,e.keyFn?t=>e.keyFn(t.data):void 0);i.enter().append("path").classed("link",!0).attr("d",t=>a.generatePath(t)).style("stroke",t=>r(t.data)).style("fill","none").attr("transform",t=>{const n=e.offsetFn(t.data),a=e.offsetTangentFn(t.data);return"left"===e.direction||"right"===e.direction?`translate(${n}, ${a})`:`translate(${a}, ${n})`}),i.transition().attr("d",t=>a.generatePath(t)).style("stroke",t=>r(t.data)).attr("transform",t=>{const n=e.offsetFn(t.data),a=e.offsetTangentFn(t.data);return"left"===e.direction||"right"===e.direction?`translate(${n}, ${a})`:`translate(${a}, ${n})`}),i.exit().remove()}drawLinks(t){const e=this.options();let n;n="left"===e.direction||"right"===e.direction?Object(m.max)(t,F):Object(m.max)(t,k);const a=new v.a.Renderer({nodeHeight:n,layerGap:e.layerGap,layerGapFn:e.layerGapFn,direction:e.direction});a.layout(t);const r=b.helper.functor(e.linkColor),i=this.layers.get("main/link").selectAll("path.link").data(t,e.keyFn?t=>e.keyFn(t.data):void 0);i.enter().append("path").classed("link",!0).attr("d",t=>a.generatePath(t)).style("stroke",t=>r(t.data)).style("fill","none").attr("transform",t=>{const n=e.offsetFn(t.data),a=e.offsetTangentFn(t.data);return"left"===e.direction||"right"===e.direction?`translate(${n}, ${a})`:`translate(${a}, ${n})`}),i.transition().attr("d",t=>a.generatePath(t)).style("stroke",t=>r(t.data)).attr("transform",t=>{const n=e.offsetFn(t.data),a=e.offsetTangentFn(t.data);return"left"===e.direction||"right"===e.direction?`translate(${n}, ${a})`:`translate(${a}, ${n})`}),i.exit().remove()}visualize(){if(!this.hasData()||!this.hasNonZeroArea())return;const t=this.data()||[],e=this.options();this.force=new v.a.Force(e.labella),e.domain?e.scale.domain(e.domain):e.scale.domain(Object(m.extent)(t,e.timeFn)).nice(),e.scale.range([0,"left"===e.direction||"right"===e.direction?this.getInnerHeight():this.getInnerWidth()]);const n=b.helper.extend({},e.textStyle);Object.keys(n).forEach(t=>{n[t]=b.helper.functor(n[t])}),n.fill=n.fill||b.helper.functor(e.labelTextColor);const a=this.layers.get("dummy").append("text").classed("label-text",!0),r=t.map(t=>{const r=a.call(this.updateLabelText,n,t).node().getBBox(),i=r.width+e.labelPadding.left+e.labelPadding.right,o=r.height+e.labelPadding.top+e.labelPadding.bottom,s=new v.a.Node((t=>e.scale(e.timeFn(t)))(t),"left"===e.direction||"right"===e.direction?o:i,t);return s.w=i,s.h=o,s});return a.remove(),this.force.options(e.labella).nodes(r).compute(),this.drawAxes(),this.drawDots(t),this.drawLabels(this.force.nodes(),n),this.drawLinks(this.force.nodes()),this}}}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2QzS2l0VGltZWxpbmUvZXh0ZXJuYWwge1wicm9vdFwiOlwiZDNcIixcImNvbW1vbmpzMlwiOlwiZDMtc2VsZWN0aW9uXCIsXCJjb21tb25qc1wiOlwiZDMtc2VsZWN0aW9uXCIsXCJhbWRcIjpcImQzLXNlbGVjdGlvblwifSIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lL2V4dGVybmFsIHtcInJvb3RcIjpcImQzXCIsXCJjb21tb25qczJcIjpcImQzLWFycmF5XCIsXCJjb21tb25qc1wiOlwiZDMtYXJyYXlcIixcImFtZFwiOlwiZDMtYXJyYXlcIn0iLCJ3ZWJwYWNrOi8vZDNLaXRUaW1lbGluZS9leHRlcm5hbCB7XCJyb290XCI6XCJkM0tpdFwiLFwiY29tbW9uanMyXCI6XCJkM2tpdFwiLFwiY29tbW9uanNcIjpcImQza2l0XCIsXCJhbWRcIjpcImQza2l0XCJ9Iiwid2VicGFjazovL2QzS2l0VGltZWxpbmUvZXh0ZXJuYWwge1wicm9vdFwiOlwibGFiZWxsYVwiLFwiY29tbW9uanMyXCI6XCJsYWJlbGxhXCIsXCJjb21tb25qc1wiOlwibGFiZWxsYVwiLFwiYW1kXCI6XCJsYWJlbGxhXCJ9Iiwid2VicGFjazovL2QzS2l0VGltZWxpbmUvZXh0ZXJuYWwge1wicm9vdFwiOlwiZDNcIixcImNvbW1vbmpzMlwiOlwiZDMtYXhpc1wiLFwiY29tbW9uanNcIjpcImQzLWF4aXNcIixcImFtZFwiOlwiZDMtYXhpc1wifSIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lL2V4dGVybmFsIHtcInJvb3RcIjpcImQzXCIsXCJjb21tb25qczJcIjpcImQzLXNjYWxlXCIsXCJjb21tb25qc1wiOlwiZDMtc2NhbGVcIixcImFtZFwiOlwiZDMtc2NhbGVcIn0iLCJ3ZWJwYWNrOi8vZDNLaXRUaW1lbGluZS9leHRlcm5hbCB7XCJyb290XCI6XCJkM1wiLFwiY29tbW9uanMyXCI6XCJkMy1kaXNwYXRjaFwiLFwiY29tbW9uanNcIjpcImQzLWRpc3BhdGNoXCIsXCJhbWRcIjpcImQzLWRpc3BhdGNoXCJ9Iiwid2VicGFjazovL2QzS2l0VGltZWxpbmUvZXh0ZXJuYWwge1wicm9vdFwiOlwiZDNcIixcImNvbW1vbmpzMlwiOlwiZDMtdHJhbnNpdGlvblwiLFwiY29tbW9uanNcIjpcImQzLXRyYW5zaXRpb25cIixcImFtZFwiOlwiZDMtdHJhbnNpdGlvblwifSIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vZDNLaXRUaW1lbGluZS8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2RyYWcuanMiLCJ3ZWJwYWNrOi8vZDNLaXRUaW1lbGluZS8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovL2QzS2l0VGltZWxpbmUvLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvZHJhZy5qcyIsIndlYnBhY2s6Ly9kM0tpdFRpbWVsaW5lLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzRfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzVfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzZfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJub3Byb3BhZ2F0aW9uIiwiZXh0ZXJuYWxfcm9vdF9kM19jb21tb25qczJfZDNfc2VsZWN0aW9uX2NvbW1vbmpzX2QzX3NlbGVjdGlvbl9hbWRfZDNfc2VsZWN0aW9uXyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5vZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm5vZHJhZyIsInZpZXciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNlbGVjdGlvbiIsIm9uIiwiX19ub3NlbGVjdCIsInN0eWxlIiwiTW96VXNlclNlbGVjdCIsImNvbnN0YW50IiwieCIsIkRyYWdFdmVudCIsInRhcmdldCIsInR5cGUiLCJzdWJqZWN0IiwiaWQiLCJhY3RpdmUiLCJ5IiwiZHgiLCJkeSIsImRpc3BhdGNoIiwidGhpcyIsImlkZW50aWZpZXIiLCJfIiwiZGVmYXVsdEZpbHRlciIsImJ1dHRvbiIsImRlZmF1bHRDb250YWluZXIiLCJwYXJlbnROb2RlIiwiZGVmYXVsdFN1YmplY3QiLCJkZWZhdWx0VG91Y2hhYmxlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzcmNfZHJhZyIsIm1vdXNlZG93bngiLCJtb3VzZWRvd255IiwibW91c2Vtb3ZpbmciLCJ0b3VjaGVuZGluZyIsImZpbHRlciIsImNvbnRhaW5lciIsInRvdWNoYWJsZSIsImdlc3R1cmVzIiwibGlzdGVuZXJzIiwiZXh0ZXJuYWxfcm9vdF9kM19jb21tb25qczJfZDNfZGlzcGF0Y2hfY29tbW9uanNfZDNfZGlzcGF0Y2hfYW1kX2QzX2Rpc3BhdGNoXyIsImNsaWNrRGlzdGFuY2UyIiwiZHJhZyIsIm1vdXNlZG93bmVkIiwidG91Y2hzdGFydGVkIiwidG91Y2htb3ZlZCIsInRvdWNoZW5kZWQiLCJnZXN0dXJlIiwiYmVmb3Jlc3RhcnQiLCJtb3VzZW1vdmVkIiwibW91c2V1cHBlZCIsImNsaWVudFgiLCJjbGllbnRZIiwibW91c2UiLCJub2NsaWNrIiwic2V0VGltZW91dCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImxlbmd0aCIsImNsZWFyVGltZW91dCIsInBvaW50IiwidGhhdCIsImFyZ3MiLCJzdWJsaXN0ZW5lcnMiLCJjb3B5IiwicDAiLCJjbGlja0Rpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJyZWN0V2lkdGgiLCJ3IiwicmVjdEhlaWdodCIsImgiLCJpZGVudGl0eSIsIl9fd2VicGFja19leHBvcnRzX18iLCJleHRlcm5hbF9yb290X2QzS2l0X2NvbW1vbmpzMl9kM2tpdF9jb21tb25qc19kM2tpdF9hbWRfZDNraXRfIiwiW29iamVjdCBPYmplY3RdIiwiZGVlcEV4dGVuZCIsInN1cGVyIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJtYXJnaW4iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJpbml0aWFsV2lkdGgiLCJpbml0aWFsSGVpZ2h0Iiwic2NhbGUiLCJleHRlcm5hbF9yb290X2QzX2NvbW1vbmpzMl9kM19zY2FsZV9jb21tb25qc19kM19zY2FsZV9hbWRfZDNfc2NhbGVfIiwiZG9tYWluIiwidW5kZWZpbmVkIiwiZGlyZWN0aW9uIiwiZG90UmFkaXVzIiwiZm9ybWF0QXhpcyIsImxheWVyR2FwIiwibGF5ZXJHYXBGbiIsImxhYmVsbGEiLCJrZXlGbiIsInRpbWVGbiIsInRpbWUiLCJlbmRUaW1lRm4iLCJlbmRUaW1lIiwidGV4dEZuIiwidGV4dCIsIm9mZnNldEZuIiwib2Zmc2V0Iiwib2Zmc2V0VGFuZ2VudEZuIiwib2Zmc2V0VGFuZ2VudCIsInRleHRPZmZzZXRGbiIsInRleHRPZmZzZXQiLCJlbmREb3RDb2xvciIsImRvdENvbG9yIiwibGFiZWxCZ0NvbG9yIiwibGFiZWxUZXh0Q29sb3IiLCJsaW5lQ29sb3IiLCJsaW5rQ29sb3IiLCJsYWJlbFBhZGRpbmciLCJ0ZXh0WU9mZnNldCIsImVsZW1lbnQiLCJvcHRpb25zIiwibGF5ZXJzIiwibWFpbiIsImNsYXNzZWQiLCJmb3JjZSIsImV4dGVybmFsX3Jvb3RfbGFiZWxsYV9jb21tb25qczJfbGFiZWxsYV9jb21tb25qc19sYWJlbGxhX2FtZF9sYWJlbGxhX2RlZmF1bHQiLCJhIiwiRm9yY2UiLCJ1cGRhdGVMYWJlbFRleHQiLCJ2aXN1YWxpemUiLCJtYXhWYWwiLCJub2RlcyIsImV4dGVybmFsX3Jvb3RfZDNfY29tbW9uanMyX2QzX2FycmF5X2NvbW1vbmpzX2QzX2FycmF5X2FtZF9kM19hcnJheV8iLCJhYnMiLCJoZWlnaHQiLCJ3aWR0aCIsInRleHRTdHlsZSIsImFjY2Vzc29yIiwiZnVuY3RvciIsImF0dHIiLCJrZXlzIiwiZm9yRWFjaCIsInN0eWxlRm4iLCJheGlzVHJhbnNmb3JtIiwiYXhpcyIsImV4dGVybmFsX3Jvb3RfZDNfY29tbW9uanMyX2QzX2F4aXNfY29tbW9uanNfZDNfYXhpc19hbWRfZDNfYXhpc18iLCJnZXRJbm5lcldpZHRoIiwiZ2V0SW5uZXJIZWlnaHQiLCJkYXRhIiwidGltZVBvcyIsInNVcGRhdGUiLCJzZWxlY3RBbGwiLCJmaWVsZCIsIm9wcG9zaXRlRmllbGQiLCJmaWVsZEF4aXMiLCJvcHBvc2l0ZUZpZWxkQXhpcyIsImVudGVyIiwiYXBwZW5kIiwidHJhbnNpdGlvbiIsImRpc3BhdGNoQXMiLCJlbmRUaW1lUG9zIiwiZXhpdCIsInJlbW92ZSIsImxhYmVsVGV4dFN0eWxlIiwibm9kZUhlaWdodCIsIm5vZGVQb3MiLCJSZW5kZXJlciIsImxheW91dCIsInNFbnRlciIsInNUcmFucyIsInNlbGVjdCIsIm5vZGUiLCJyZW5kZXJlciIsInBhdGhzIiwiZ2VuZXJhdGVQYXRoIiwiaGFzRGF0YSIsImhhc05vblplcm9BcmVhIiwibmljZSIsInJhbmdlIiwiZXh0ZW5kIiwiZmlsbCIsImR1bW15VGV4dCIsIm1hcCIsImJib3giLCJnZXRCQm94IiwiTm9kZSIsImNvbXB1dGUiLCJkcmF3QXhlcyIsImRyYXdEb3RzIiwiZHJhd0xhYmVscyIsImRyYXdMaW5rcyJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsRUFBQUcsUUFBQSxnQkFBQUEsUUFBQSxZQUFBQSxRQUFBLFNBQUFBLFFBQUEsV0FBQUEsUUFBQSxXQUFBQSxRQUFBLFlBQUFBLFFBQUEsZUFBQUEsUUFBQSxrQkFDQSxtQkFBQUMsZUFBQUMsSUFDQUQsT0FBQSxpR0FBQUosR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxjQUFBRCxFQUFBRyxRQUFBLGdCQUFBQSxRQUFBLFlBQUFBLFFBQUEsU0FBQUEsUUFBQSxXQUFBQSxRQUFBLFdBQUFBLFFBQUEsWUFBQUEsUUFBQSxlQUFBQSxRQUFBLGtCQUVBSixFQUFBLGNBQUFDLEVBQUFELEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLE1BQUFBLEVBQUEsUUFBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQVJBLENBU0NPLE9BQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDRCxtQkNUQSxJQUFBQyxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFoQixRQUdBLElBQUFDLEVBQUFhLEVBQUFFLEdBQUEsQ0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBbEIsUUFB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QUFBdU4sRUFBQUYsRUFDQXhOLEtBQUF1RCxLQUFBNEcsZ0JBQUFtQyxFQUFBbk0sR0FDQTJNLE9BQ0FhLFVBQ0FqSCxFQUFBZ0gsRUFBQWhELE1BQUFmLEVBQUFILGFBQUFuQyxLQUFBc0MsRUFBQUgsYUFBQWxDLE1BQ0FWLEVBQUE4RyxFQUFBakQsT0FBQWQsRUFBQUgsYUFBQWpDLElBQUFvQyxFQUFBSCxhQUFBaEMsT0FDQXNGLEVBQUEsSUFBdUI5QyxFQUFBQyxFQUFPMkQsS0FSOUJ6TixJQUFBd0osRUFBQWhDLE1BQUFnQyxFQUFBckIsT0FBQW5JLElBU0FxTCxDQUFBckwsR0FDQSxTQUFBd0osRUFBQTVCLFdBQUEsVUFBQTRCLEVBQUE1QixVQUFBbkIsRUFBQUYsRUFDQXZHLEdBSUEsT0FGQTJNLEVBQUFwRyxJQUNBb0csRUFBQWxHLElBQ0FrRyxJQWdCQSxPQWJBVSxFQUFBbkIsU0FFQTlJLEtBQUF3RyxNQUNBSixVQUFBdkIsU0FDQWtDLFNBQ0F1RCxVQUdBdEssS0FBQXVLLFdBQ0F2SyxLQUFBd0ssU0FBQXhDLEdBQ0FoSSxLQUFBeUssV0FBQXpLLEtBQUF3RyxNQUFBTyxRQUFBZ0MsR0FDQS9JLEtBQUEwSyxVQUFBMUssS0FBQXdHLE1BQUFPLFNBRUEvRyIsImZpbGUiOiJkM2tpdC10aW1lbGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImQzLXNlbGVjdGlvblwiKSwgcmVxdWlyZShcImQzLWFycmF5XCIpLCByZXF1aXJlKFwiZDNraXRcIiksIHJlcXVpcmUoXCJsYWJlbGxhXCIpLCByZXF1aXJlKFwiZDMtYXhpc1wiKSwgcmVxdWlyZShcImQzLXNjYWxlXCIpLCByZXF1aXJlKFwiZDMtZGlzcGF0Y2hcIiksIHJlcXVpcmUoXCJkMy10cmFuc2l0aW9uXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImQzLXNlbGVjdGlvblwiLCBcImQzLWFycmF5XCIsIFwiZDNraXRcIiwgXCJsYWJlbGxhXCIsIFwiZDMtYXhpc1wiLCBcImQzLXNjYWxlXCIsIFwiZDMtZGlzcGF0Y2hcIiwgXCJkMy10cmFuc2l0aW9uXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImQzS2l0VGltZWxpbmVcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJkMy1zZWxlY3Rpb25cIiksIHJlcXVpcmUoXCJkMy1hcnJheVwiKSwgcmVxdWlyZShcImQza2l0XCIpLCByZXF1aXJlKFwibGFiZWxsYVwiKSwgcmVxdWlyZShcImQzLWF4aXNcIiksIHJlcXVpcmUoXCJkMy1zY2FsZVwiKSwgcmVxdWlyZShcImQzLWRpc3BhdGNoXCIpLCByZXF1aXJlKFwiZDMtdHJhbnNpdGlvblwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiZDNLaXRUaW1lbGluZVwiXSA9IGZhY3Rvcnkocm9vdFtcImQzXCJdLCByb290W1wiZDNcIl0sIHJvb3RbXCJkM0tpdFwiXSwgcm9vdFtcImxhYmVsbGFcIl0sIHJvb3RbXCJkM1wiXSwgcm9vdFtcImQzXCJdLCByb290W1wiZDNcIl0sIHJvb3RbXCJkM1wiXSk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzZfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOF9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX180X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX182X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184X187IiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCBmcm9tIFwiLi9ub2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtldmVudCwgY3VzdG9tRXZlbnQsIHNlbGVjdCwgbW91c2UsIHRvdWNofSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9kcmFnLCB7eWVzZHJhZ30gZnJvbSBcIi4vbm9kcmFnXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnRcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IERyYWdFdmVudCBmcm9tIFwiLi9ldmVudFwiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChkKSB7XG4gIHJldHVybiBkID09IG51bGwgPyB7eDogZXZlbnQueCwgeTogZXZlbnQueX0gOiBkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcbiAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICBtb3VzZWRvd254LFxuICAgICAgbW91c2Vkb3dueSxcbiAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC5kcmFnXCIsIG1vdXNldXBwZWQsIHRydWUpO1xuICAgIG5vZHJhZyhldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICBtb3VzZWRvd254ID0gZXZlbnQuY2xpZW50WDtcbiAgICBtb3VzZWRvd255ID0gZXZlbnQuY2xpZW50WTtcbiAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0gbW91c2Vkb3dueCwgZHkgPSBldmVudC5jbGllbnRZIC0gbW91c2Vkb3dueTtcbiAgICAgIG1vdXNlbW92aW5nID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICB9XG4gICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgeWVzZHJhZyhldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgbm9ldmVudCgpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBjID0gY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodG91Y2hlc1tpXS5pZGVudGlmaWVyLCBjLCB0b3VjaCwgdGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub2V2ZW50KCk7XG4gICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVzdGFydChpZCwgY29udGFpbmVyLCBwb2ludCwgdGhhdCwgYXJncykge1xuICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgc3VibGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvcHkoKTtcblxuICAgIGlmICghY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCBcImJlZm9yZXN0YXJ0XCIsIHMsIGlkLCBhY3RpdmUsIHBbMF0sIHBbMV0sIDAsIDAsIHN1Ymxpc3RlbmVycyksIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKChldmVudC5zdWJqZWN0ID0gcyA9IHN1YmplY3QuYXBwbHkodGhhdCwgYXJncykpID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgIGR4ID0gcy54IC0gcFswXSB8fCAwO1xuICAgICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KSkgcmV0dXJuO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xuICAgICAgdmFyIHAwID0gcCwgbjtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRdLCAtLWFjdGl2ZTsgLy8gbm9icmVha1xuICAgICAgICBjYXNlIFwiZHJhZ1wiOiBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIG4gPSBhY3RpdmU7IGJyZWFrO1xuICAgICAgfVxuICAgICAgY3VzdG9tRXZlbnQobmV3IERyYWdFdmVudChkcmFnLCB0eXBlLCBzLCBpZCwgbiwgcFswXSArIGR4LCBwWzFdICsgZHksIHBbMF0gLSBwMFswXSwgcFsxXSAtIHAwWzFdLCBzdWJsaXN0ZW5lcnMpLCBzdWJsaXN0ZW5lcnMuYXBwbHksIHN1Ymxpc3RlbmVycywgW3R5cGUsIHRoYXQsIGFyZ3NdKTtcbiAgICB9O1xuICB9XG5cbiAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogc3ViamVjdDtcbiAgfTtcblxuICBkcmFnLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xuICB9O1xuXG4gIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiBkcmFnO1xufVxuIiwiaW1wb3J0IHsgYXhpc0xlZnQsIGF4aXNSaWdodCwgYXhpc0JvdHRvbSwgYXhpc1RvcCB9IGZyb20gJ2QzLWF4aXMnO1xuaW1wb3J0IHsgc2NhbGVUaW1lIH0gZnJvbSAnZDMtc2NhbGUnO1xuaW1wb3J0IHsgZHJhZyB9IGZyb20gJ2QzLWRyYWcnO1xuaW1wb3J0ICdkMy10cmFuc2l0aW9uJztcbmltcG9ydCB7IG1heCwgZXh0ZW50IH0gZnJvbSAnZDMtYXJyYXknO1xuaW1wb3J0IHsgU3ZnQ2hhcnQsIGhlbHBlciB9IGZyb20gJ2Qza2l0JztcbmltcG9ydCBsYWJlbGxhIGZyb20gJ2xhYmVsbGEnO1xuXG5jb25zdCByZWN0V2lkdGggPSBkID0+IGQudztcbmNvbnN0IHJlY3RIZWlnaHQgPSBkID0+IGQuaDtcbmNvbnN0IGlkZW50aXR5ID0gZCA9PiBkO1xuXG5jbGFzcyBUaW1lbGluZSBleHRlbmRzIFN2Z0NoYXJ0IHtcbiAgc3RhdGljIGdldERlZmF1bHRPcHRpb25zKCkge1xuICAgIHJldHVybiBoZWxwZXIuZGVlcEV4dGVuZChzdXBlci5nZXREZWZhdWx0T3B0aW9ucygpLCB7XG4gICAgICBtYXJnaW46IHsgbGVmdDogNDAsIHJpZ2h0OiAyMCwgdG9wOiAyMCwgYm90dG9tOiAyMCB9LFxuICAgICAgaW5pdGlhbFdpZHRoOiA0MDAsXG4gICAgICBpbml0aWFsSGVpZ2h0OiA0MDAsXG4gICAgICBzY2FsZTogc2NhbGVUaW1lKCksXG4gICAgICBkb21haW46IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGlvbjogJ3JpZ2h0JyxcbiAgICAgIGRvdFJhZGl1czogMyxcbiAgICAgIGZvcm1hdEF4aXM6IGlkZW50aXR5LFxuICAgICAgbGF5ZXJHYXA6IDYwLFxuICAgICAgbGF5ZXJHYXBGbjogdW5kZWZpbmVkLFxuICAgICAgbGFiZWxsYToge30sXG4gICAgICBrZXlGbjogdW5kZWZpbmVkLFxuICAgICAgdGltZUZuOiBkID0+IGQudGltZSxcbiAgICAgIGVuZFRpbWVGbjogZCA9PiBkLmVuZFRpbWUsXG4gICAgICB0ZXh0Rm46IGQgPT4gZC50ZXh0LFxuICAgICAgb2Zmc2V0Rm46IGQgPT4gZC5vZmZzZXQsXG4gICAgICBvZmZzZXRUYW5nZW50Rm46IGQgPT4gZC5vZmZzZXRUYW5nZW50LFxuICAgICAgdGV4dE9mZnNldEZuOiBkID0+IGQudGV4dE9mZnNldCxcbiAgICAgIGVuZERvdENvbG9yOiAnIzAwOTkwMCcsXG4gICAgICBkb3RDb2xvcjogJyMyMjInLFxuICAgICAgbGFiZWxCZ0NvbG9yOiAnIzIyMicsXG4gICAgICBsYWJlbFRleHRDb2xvcjogJyNmZmYnLFxuICAgICAgbGluZUNvbG9yOiAnIzIyMicsXG4gICAgICBsaW5rQ29sb3I6ICcjMjIyJyxcbiAgICAgIGxhYmVsUGFkZGluZzogeyBsZWZ0OiA0LCByaWdodDogNCwgdG9wOiAzLCBib3R0b206IDIgfSxcbiAgICAgIHRleHRZT2Zmc2V0OiAnMC44NWVtJyxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDdXN0b21FdmVudE5hbWVzKCkge1xuICAgIHJldHVybiBbXG4gICAgICAnZG90Q2xpY2snLFxuICAgICAgJ2RvdE1vdXNlb3ZlcicsXG4gICAgICAnZG90TW91c2Vtb3ZlJyxcbiAgICAgICdkb3RNb3VzZW91dCcsXG4gICAgICAnZG90TW91c2VlbnRlcicsXG4gICAgICAnZG90TW91c2VsZWF2ZScsXG4gICAgICAnbGFiZWxDbGljaycsXG4gICAgICAnbGFiZWxNb3VzZW92ZXInLFxuICAgICAgJ2xhYmVsTW91c2Vtb3ZlJyxcbiAgICAgICdsYWJlbE1vdXNlZW50ZXInLFxuICAgICAgJ2xhYmVsTW91c2VsZWF2ZScsXG4gICAgICAnbGFiZWxNb3VzZW91dCcsXG4gICAgICAnbGFiZWxEcmFnJyxcbiAgICAgICdsYWJlbERyYWdTdGFydCcsXG4gICAgICAnbGFiZWxEcmFnRW5kJyxcbiAgICBdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHN1cGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5sYXllcnMuY3JlYXRlKFsnZHVtbXknLCB7IG1haW46IFsnYXhpcycsICdsaW5rJywgJ2RvdCcsICdsYWJlbCddIH1dKTtcbiAgICB0aGlzLmxheWVycy5nZXQoJ21haW4vYXhpcycpLmNsYXNzZWQoJ2F4aXMnLCB0cnVlKTtcblxuICAgIHRoaXMuZm9yY2UgPSBuZXcgbGFiZWxsYS5Gb3JjZShvcHRpb25zLmxhYmVsbGEpO1xuXG4gICAgdGhpcy51cGRhdGVMYWJlbFRleHQgPSB0aGlzLnVwZGF0ZUxhYmVsVGV4dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudmlzdWFsaXplID0gdGhpcy52aXN1YWxpemUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uKCdkYXRhJywgdGhpcy52aXN1YWxpemUpO1xuICAgIC8vIHRoaXMub24oJ29wdGlvbnMnLCB0aGlzLnZpc3VhbGl6ZSk7XG4gICAgdGhpcy5vbigncmVzaXplJywgdGhpcy52aXN1YWxpemUpO1xuICB9XG5cbiAgcmVzaXplVG9GaXQoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucygpO1xuICAgIGxldCBtYXhWYWw7XG4gICAgY29uc3Qgbm9kZXMgPSB0aGlzLmZvcmNlLm5vZGVzKCk7XG5cbiAgICBzd2l0Y2ggKG9wdGlvbnMuZGlyZWN0aW9uKSB7XG4gICAgICBjYXNlICd1cCc6XG4gICAgICAgIG1heFZhbCA9IG1heChub2RlcywgZCA9PiBNYXRoLmFicyhkLnkpKSB8fCAwO1xuICAgICAgICB0aGlzLmhlaWdodChtYXhWYWwgKyBvcHRpb25zLm1hcmdpbi50b3AgKyBvcHRpb25zLm1hcmdpbi5ib3R0b20pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICBtYXhWYWwgPSBtYXgobm9kZXMsIGQgPT4gTWF0aC5hYnMoZC55ICsgZC5keSkpIHx8IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0KG1heFZhbCArIG9wdGlvbnMubWFyZ2luLnRvcCArIG9wdGlvbnMubWFyZ2luLmJvdHRvbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIG1heFZhbCA9IG1heChub2RlcywgZCA9PiBNYXRoLmFicyhkLngpKSB8fCAwO1xuICAgICAgICB0aGlzLndpZHRoKG1heFZhbCArIG9wdGlvbnMubWFyZ2luLmxlZnQgKyBvcHRpb25zLm1hcmdpbi5yaWdodCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBtYXhWYWwgPSBtYXgobm9kZXMsIGQgPT4gTWF0aC5hYnMoZC54ICsgZC5keCkpIHx8IDA7XG4gICAgICAgIHRoaXMud2lkdGgobWF4VmFsICsgb3B0aW9ucy5tYXJnaW4ubGVmdCArIG9wdGlvbnMubWFyZ2luLnJpZ2h0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB1cGRhdGVMYWJlbFRleHQoc2VsZWN0aW9uLCB0ZXh0U3R5bGUsIGFjY2Vzc29yKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucygpO1xuXG4gICAgYWNjZXNzb3IgPSBhY2Nlc3NvciA/IGhlbHBlci5mdW5jdG9yKGFjY2Vzc29yKSA6IGlkZW50aXR5O1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAudGV4dChkID0+IG9wdGlvbnMudGV4dEZuKGFjY2Vzc29yKGQpKSlcbiAgICAgIC5hdHRyKCdkeScsIG9wdGlvbnMudGV4dFlPZmZzZXQpXG4gICAgICAuYXR0cigneCcsIG9wdGlvbnMubGFiZWxQYWRkaW5nLmxlZnQpXG4gICAgICAuYXR0cigneScsIG9wdGlvbnMubGFiZWxQYWRkaW5nLnRvcCk7XG5cbiAgICBPYmplY3Qua2V5cyh0ZXh0U3R5bGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVGbiA9IHRleHRTdHlsZVtrZXldO1xuICAgICAgc2VsZWN0aW9uLnN0eWxlKGtleSwgKGQsIGkpID0+IHN0eWxlRm4oYWNjZXNzb3IoZCksIGkpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzZWxlY3Rpb247XG4gIH1cblxuICBkcmF3QXhlcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zKCk7XG5cbiAgICBsZXQgYXhpc1RyYW5zZm9ybTtcblxuICAgIHN3aXRjaCAob3B0aW9ucy5kaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgdGhpcy5heGlzID0gYXhpc0xlZnQoKTtcbiAgICAgICAgYXhpc1RyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHswfSwkezB9KWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIHRoaXMuYXhpcyA9IGF4aXNSaWdodCgpO1xuICAgICAgICBheGlzVHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3RoaXMuZ2V0SW5uZXJXaWR0aCgpfSwkezB9KWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndXAnOlxuICAgICAgICB0aGlzLmF4aXMgPSBheGlzQm90dG9tKCk7XG4gICAgICAgIGF4aXNUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7MH0sJHt0aGlzLmdldElubmVySGVpZ2h0KCl9KWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgIHRoaXMuYXhpcyA9IGF4aXNUb3AoKTtcbiAgICAgICAgYXhpc1RyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHswfSwkezB9KWA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJzLmdldCgnbWFpbicpLmF0dHIoJ3RyYW5zZm9ybScsIGF4aXNUcmFuc2Zvcm0pO1xuXG4gICAgY29uc3QgZm9ybWF0QXhpcyA9IG9wdGlvbnMuZm9ybWF0QXhpcyB8fCBpZGVudGl0eTtcblxuICAgIGZvcm1hdEF4aXModGhpcy5heGlzLnNjYWxlKG9wdGlvbnMuc2NhbGUpKTtcblxuICAgIHRoaXMubGF5ZXJzLmdldCgnbWFpbi9heGlzJykuY2FsbCh0aGlzLmF4aXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkcmF3RG90cyhkYXRhKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucygpO1xuICAgIGNvbnN0IHRpbWVQb3MgPSBkID0+IG9wdGlvbnMuc2NhbGUob3B0aW9ucy50aW1lRm4oZCkpO1xuXG4gICAgY29uc3Qgc1VwZGF0ZSA9IHRoaXMubGF5ZXJzXG4gICAgICAuZ2V0KCdtYWluL2RvdCcpXG4gICAgICAuc2VsZWN0QWxsKCdjaXJjbGUuZG90JylcbiAgICAgIC5kYXRhKGRhdGEsIG9wdGlvbnMua2V5Rm4pO1xuXG4gICAgY29uc3QgZmllbGQgPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IG9wdGlvbnMuZGlyZWN0aW9uID09PSAncmlnaHQnID8gJ2N5JyA6ICdjeCc7XG4gICAgY29uc3Qgb3Bwb3NpdGVGaWVsZCA9IGZpZWxkID09PSAnY3knID8gJ2N4JyA6ICdjeSc7XG5cbiAgICBjb25zdCBmaWVsZEF4aXMgPSBmaWVsZCA9PT0gJ2N5JyA/ICd4JyA6ICd5JztcbiAgICBjb25zdCBvcHBvc2l0ZUZpZWxkQXhpcyA9IGZpZWxkID09PSAnY3knID8gJ3knIDogJ3gnO1xuICAgIGlmIChvcHRpb25zLmRvdENvbG9yID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICBzVXBkYXRlXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuY2xhc3NlZCgnZG90JywgdHJ1ZSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBvcHRpb25zLmxpbmVDb2xvcilcbiAgICAgICAgLmF0dHIoZmllbGRBeGlzLCBkID0+IG9wdGlvbnMub2Zmc2V0Rm4oZCkpXG4gICAgICAgIC5hdHRyKG9wcG9zaXRlRmllbGRBeGlzLCBkID0+IHRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgb3B0aW9ucy5kb3RSYWRpdXMpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCAxKTtcblxuICAgICAgc1VwZGF0ZVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgb3B0aW9ucy5saW5lQ29sb3IpXG4gICAgICAgIC5hdHRyKGZpZWxkQXhpcywgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKVxuICAgICAgICAuYXR0cihvcHBvc2l0ZUZpZWxkQXhpcywgZCA9PiB0aW1lUG9zKGQpICsgb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZCkpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIG9wdGlvbnMuZG90UmFkaXVzKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNVcGRhdGVcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgLmNsYXNzZWQoJ2RvdCcsIHRydWUpXG4gICAgICAgIC5vbignY2xpY2snLCB0aGlzLmRpc3BhdGNoQXMoJ2RvdENsaWNrJykpXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgdGhpcy5kaXNwYXRjaEFzKCdkb3RNb3VzZW92ZXInKSlcbiAgICAgICAgLm9uKCdtb3VzZW1vdmUnLCB0aGlzLmRpc3BhdGNoQXMoJ2RvdE1vdXNlbW92ZScpKVxuICAgICAgICAub24oJ21vdXNlb3V0JywgdGhpcy5kaXNwYXRjaEFzKCdkb3RNb3VzZW91dCcpKVxuICAgICAgICAub24oJ21vdXNlZW50ZXInLCB0aGlzLmRpc3BhdGNoQXMoJ2RvdE1vdXNlZW50ZXInKSlcbiAgICAgICAgLm9uKCdtb3VzZWxlYXZlJywgdGhpcy5kaXNwYXRjaEFzKCdkb3RNb3VzZWxlYXZlJykpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIG9wdGlvbnMuZG90Q29sb3IpXG4gICAgICAgIC5hdHRyKCdyJywgb3B0aW9ucy5kb3RSYWRpdXMpXG4gICAgICAgIC5hdHRyKGZpZWxkLCBkID0+IHRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgLmF0dHIob3Bwb3NpdGVGaWVsZCwgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKTtcblxuICAgICAgc1VwZGF0ZVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIG9wdGlvbnMuZG90Q29sb3IpXG4gICAgICAgIC5hdHRyKCdyJywgb3B0aW9ucy5kb3RSYWRpdXMpXG4gICAgICAgIC5hdHRyKGZpZWxkLCBkID0+IHRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgLmF0dHIob3Bwb3NpdGVGaWVsZCwgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKTtcbiAgICB9XG4gICAgLypcblxuKi9cbiAgICBpZiAob3B0aW9ucy5lbmRUaW1lRm4pIHtcbiAgICAgIGNvbnN0IGVuZFRpbWVQb3MgPSBkID0+IG9wdGlvbnMuc2NhbGUob3B0aW9ucy5lbmRUaW1lRm4oZCkpO1xuXG4gICAgICBpZiAob3B0aW9ucy5lbmREb3RDb2xvciA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICBzVXBkYXRlXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuY2xhc3NlZCgnZG90JywgdHJ1ZSlcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIG9wdGlvbnMubGluZUNvbG9yKVxuICAgICAgICAgIC5hdHRyKGZpZWxkQXhpcywgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKVxuICAgICAgICAgIC5hdHRyKG9wcG9zaXRlRmllbGRBeGlzLCBkID0+IGVuZFRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBvcHRpb25zLmRvdFJhZGl1cylcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgMSk7XG5cbiAgICAgICAgc1VwZGF0ZVxuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIG9wdGlvbnMubGluZUNvbG9yKVxuICAgICAgICAgIC5hdHRyKGZpZWxkQXhpcywgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKVxuICAgICAgICAgIC5hdHRyKG9wcG9zaXRlRmllbGRBeGlzLCBkID0+IGVuZFRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBvcHRpb25zLmRvdFJhZGl1cylcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzVXBkYXRlXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgIC5jbGFzc2VkKCdkb3QnLCB0cnVlKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIG9wdGlvbnMuZW5kRG90Q29sb3IpXG4gICAgICAgICAgLmF0dHIoJ3InLCBvcHRpb25zLmRvdFJhZGl1cylcbiAgICAgICAgICAuYXR0cihmaWVsZCwgZCA9PiBlbmRUaW1lUG9zKGQpICsgb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZCkpXG4gICAgICAgICAgLmF0dHIob3Bwb3NpdGVGaWVsZCwgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKTtcblxuICAgICAgICBzVXBkYXRlXG4gICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIG9wdGlvbnMuZW5kRG90Q29sb3IpXG4gICAgICAgICAgLmF0dHIoJ3InLCBvcHRpb25zLmRvdFJhZGl1cylcbiAgICAgICAgICAuYXR0cihmaWVsZCwgZCA9PiBlbmRUaW1lUG9zKGQpICsgb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZCkpXG4gICAgICAgICAgLmF0dHIob3Bwb3NpdGVGaWVsZCwgZCA9PiBvcHRpb25zLm9mZnNldEZuKGQpKTtcbiAgICAgIH1cbiAgICAgIHNVcGRhdGVcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5jbGFzc2VkKCd0aW1lLWR1cmF0aW9uJywgdHJ1ZSlcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBvcHRpb25zLmxpbmVDb2xvcilcbiAgICAgICAgLmF0dHIoZmllbGRBeGlzLCBkID0+IG9wdGlvbnMub2Zmc2V0Rm4oZCkpXG4gICAgICAgIC5hdHRyKG9wcG9zaXRlRmllbGRBeGlzLCBkID0+IHRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gZW5kVGltZVBvcyhkKSAtIHRpbWVQb3MoZCkpO1xuXG4gICAgICBzVXBkYXRlXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBvcHRpb25zLmxpbmVDb2xvcilcbiAgICAgICAgLmF0dHIoZmllbGRBeGlzLCBkID0+IG9wdGlvbnMub2Zmc2V0Rm4oZCkpXG4gICAgICAgIC5hdHRyKG9wcG9zaXRlRmllbGRBeGlzLCBkID0+IHRpbWVQb3MoZCkgKyBvcHRpb25zLm9mZnNldFRhbmdlbnRGbihkKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gZW5kVGltZVBvcyhkKSAtIHRpbWVQb3MoZCkpO1xuICAgIH1cblxuICAgIHNVcGRhdGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkcmF3TGFiZWxzKG5vZGVzLCBsYWJlbFRleHRTdHlsZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMoKTtcbiAgICBsZXQgbm9kZUhlaWdodDtcbiAgICBpZiAob3B0aW9ucy5kaXJlY3Rpb24gPT09ICdsZWZ0JyB8fCBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgbm9kZUhlaWdodCA9IG1heChub2RlcywgcmVjdFdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZUhlaWdodCA9IG1heChub2RlcywgcmVjdEhlaWdodCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgbGFiZWxsYS5SZW5kZXJlcih7XG4gICAgICBub2RlSGVpZ2h0LFxuICAgICAgbGF5ZXJHYXA6IG9wdGlvbnMubGF5ZXJHYXAsXG4gICAgICBsYXllckdhcEZuOiBvcHRpb25zLmxheWVyR2FwRm4sXG4gICAgICBkaXJlY3Rpb246IG9wdGlvbnMuZGlyZWN0aW9uLFxuICAgIH0pO1xuXG4gICAgcmVuZGVyZXIubGF5b3V0KG5vZGVzKTtcblxuICAgIGZ1bmN0aW9uIG5vZGVQb3MoZCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXRGbihkLmRhdGEpO1xuICAgICAgY29uc3Qgb2Zmc2V0VGFuZ2VudCA9IG9wdGlvbnMub2Zmc2V0VGFuZ2VudEZuKGQuZGF0YSkgKyBvcHRpb25zLnRleHRPZmZzZXRGbihkLmRhdGEpO1xuXG4gICAgICBzd2l0Y2ggKG9wdGlvbnMuZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke2QueCArIG9mZnNldH0sJHtvZmZzZXRUYW5nZW50ICsgZC55IC0gZC5keSAvIDJ9KWA7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7ZC54ICsgbm9kZUhlaWdodCAtIGQudyAtIG9mZnNldH0sJHtvZmZzZXRUYW5nZW50ICsgZC55IC0gZC5keSAvIDJ9KWA7XG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldFRhbmdlbnQgKyBkLnggLSBkLmR4IC8gMn0sJHtkLnkgKyBvZmZzZXR9KWA7XG4gICAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7b2Zmc2V0VGFuZ2VudCArIGQueCAtIGQuZHggLyAyfSwke2QueSAtIG9mZnNldH0pYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbEJnQ29sb3IgPSBoZWxwZXIuZnVuY3RvcihvcHRpb25zLmxhYmVsQmdDb2xvcik7XG4gICAgY29uc3QgbGlua0NvbG9yID0gaGVscGVyLmZ1bmN0b3Iob3B0aW9ucy5saW5rQ29sb3IpO1xuXG4gICAgLy8gRHJhdyBsYWJlbCByZWN0YW5nbGVzXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5sYXllcnNcbiAgICAgIC5nZXQoJ21haW4vbGFiZWwnKVxuICAgICAgLnNlbGVjdEFsbCgnZy5sYWJlbC1nJylcbiAgICAgIC5kYXRhKG5vZGVzLCBvcHRpb25zLmtleUZuID8gZCA9PiBvcHRpb25zLmtleUZuKGQuZGF0YSkgOiB1bmRlZmluZWQpO1xuXG4gICAgY29uc3Qgc0VudGVyID0gc2VsZWN0aW9uXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuY2xhc3NlZCgnbGFiZWwtZycsIHRydWUpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgbm9kZVBvcylcbiAgICAgIC5jYWxsKFxuICAgICAgICBkcmFnKClcbiAgICAgICAgICAub24oJ3N0YXJ0JywgdGhpcy5kaXNwYXRjaEFzKCdsYWJlbERyYWdTdGFydCcpKVxuICAgICAgICAgIC5vbignZW5kJywgdGhpcy5kaXNwYXRjaEFzKCdsYWJlbERyYWdFbmQnKSlcbiAgICAgICAgICAub24oJ2RyYWcnLCB0aGlzLmRpc3BhdGNoQXMoJ2xhYmVsRHJhZycpKSxcbiAgICAgICk7XG5cbiAgICBzRW50ZXJcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmNsYXNzZWQoJ2xhYmVsLWJnJywgdHJ1ZSlcbiAgICAgIC5hdHRyKCdyeCcsIDIpXG4gICAgICAuYXR0cigncnknLCAyKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcmVjdFdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHJlY3RIZWlnaHQpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGxhYmVsQmdDb2xvcihkLmRhdGEpKTtcblxuICAgIHNFbnRlclxuICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAuY2xhc3NlZCgnbGFiZWwtdGV4dCcsIHRydWUpXG4gICAgICAuY2FsbCh0aGlzLnVwZGF0ZUxhYmVsVGV4dCwgbGFiZWxUZXh0U3R5bGUsIGQgPT4gZC5kYXRhKTtcblxuICAgIGNvbnN0IHNUcmFucyA9IHNlbGVjdGlvbi50cmFuc2l0aW9uKCkuYXR0cigndHJhbnNmb3JtJywgbm9kZVBvcyk7XG5cbiAgICBzVHJhbnNcbiAgICAgIC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgcmVjdFdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHJlY3RIZWlnaHQpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGxhYmVsQmdDb2xvcihkLmRhdGEpKTtcblxuICAgIHNUcmFucy5zZWxlY3QoJ3RleHQubGFiZWwtdGV4dCcpLmNhbGwodGhpcy51cGRhdGVMYWJlbFRleHQsIGxhYmVsVGV4dFN0eWxlLCBkID0+IGQuZGF0YSk7XG5cbiAgICBzZWxlY3Rpb24uZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkcmF3TGluayhub2RlKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucygpO1xuICAgIGxldCBub2RlSGVpZ2h0O1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IG9wdGlvbnMuZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBub2RlSGVpZ2h0ID0gbWF4KG5vZGUsIHJlY3RXaWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVIZWlnaHQgPSBtYXgobm9kZSwgcmVjdEhlaWdodCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgbGFiZWxsYS5SZW5kZXJlcih7XG4gICAgICBub2RlSGVpZ2h0LFxuICAgICAgbGF5ZXJHYXA6IG9wdGlvbnMubGF5ZXJHYXAsXG4gICAgICBsYXllckdhcEZuOiBvcHRpb25zLmxheWVyR2FwRm4sXG4gICAgICBkaXJlY3Rpb246IG9wdGlvbnMuZGlyZWN0aW9uLFxuICAgIH0pO1xuICAgIC8vIHJlbmRlcmVyLmxheW91dChbbm9kZV0pO1xuICAgIGNvbnN0IGxpbmtDb2xvciA9IG9wdGlvbnMubGlua0NvbG9yO1xuICAgIC8vIERyYXcgcGF0aCBmcm9tIHBvaW50IG9uIHRoZSB0aW1lbGluZSB0byB0aGUgbGFiZWwgcmVjdGFuZ2xlXG4gICAgY29uc3QgcGF0aHMgPSB0aGlzLmxheWVyc1xuICAgICAgLmdldCgnbWFpbi9saW5rJylcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGgubGluaycpXG4gICAgICAuZGF0YShub2RlLCBvcHRpb25zLmtleUZuID8gZCA9PiBvcHRpb25zLmtleUZuKGQuZGF0YSkgOiB1bmRlZmluZWQpO1xuXG4gICAgcGF0aHNcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5jbGFzc2VkKCdsaW5rJywgdHJ1ZSlcbiAgICAgIC5hdHRyKCdkJywgZCA9PiByZW5kZXJlci5nZW5lcmF0ZVBhdGgoZCkpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gbGlua0NvbG9yKGQuZGF0YSkpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXRGbihkLmRhdGEpO1xuICAgICAgICBjb25zdCBvZmZzZXRUYW5nZW50ID0gb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZC5kYXRhKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldH0sICR7b2Zmc2V0VGFuZ2VudH0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldFRhbmdlbnR9LCAke29mZnNldH0pYDtcbiAgICAgIH0pO1xuXG4gICAgcGF0aHNcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKCdkJywgZCA9PiByZW5kZXJlci5nZW5lcmF0ZVBhdGgoZCkpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gbGlua0NvbG9yKGQuZGF0YSkpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXRGbihkLmRhdGEpO1xuICAgICAgICBjb25zdCBvZmZzZXRUYW5nZW50ID0gb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZC5kYXRhKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldH0sICR7b2Zmc2V0VGFuZ2VudH0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldFRhbmdlbnR9LCAke29mZnNldH0pYDtcbiAgICAgIH0pO1xuXG4gICAgcGF0aHMuZXhpdCgpLnJlbW92ZSgpO1xuICB9XG5cbiAgZHJhd0xpbmtzKG5vZGVzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucygpO1xuICAgIGxldCBub2RlSGVpZ2h0O1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IG9wdGlvbnMuZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBub2RlSGVpZ2h0ID0gbWF4KG5vZGVzLCByZWN0V2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlSGVpZ2h0ID0gbWF4KG5vZGVzLCByZWN0SGVpZ2h0KTtcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBsYWJlbGxhLlJlbmRlcmVyKHtcbiAgICAgIG5vZGVIZWlnaHQsXG4gICAgICBsYXllckdhcDogb3B0aW9ucy5sYXllckdhcCxcbiAgICAgIGxheWVyR2FwRm46IG9wdGlvbnMubGF5ZXJHYXBGbixcbiAgICAgIGRpcmVjdGlvbjogb3B0aW9ucy5kaXJlY3Rpb24sXG4gICAgfSk7XG4gICAgcmVuZGVyZXIubGF5b3V0KG5vZGVzKTtcbiAgICBjb25zdCBsaW5rQ29sb3IgPSBoZWxwZXIuZnVuY3RvcihvcHRpb25zLmxpbmtDb2xvcik7XG4gICAgLy8gRHJhdyBwYXRoIGZyb20gcG9pbnQgb24gdGhlIHRpbWVsaW5lIHRvIHRoZSBsYWJlbCByZWN0YW5nbGVcbiAgICBjb25zdCBwYXRocyA9IHRoaXMubGF5ZXJzXG4gICAgICAuZ2V0KCdtYWluL2xpbmsnKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aC5saW5rJylcbiAgICAgIC5kYXRhKG5vZGVzLCBvcHRpb25zLmtleUZuID8gZCA9PiBvcHRpb25zLmtleUZuKGQuZGF0YSkgOiB1bmRlZmluZWQpO1xuXG4gICAgcGF0aHNcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5jbGFzc2VkKCdsaW5rJywgdHJ1ZSlcbiAgICAgIC5hdHRyKCdkJywgZCA9PiByZW5kZXJlci5nZW5lcmF0ZVBhdGgoZCkpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gbGlua0NvbG9yKGQuZGF0YSkpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXRGbihkLmRhdGEpO1xuICAgICAgICBjb25zdCBvZmZzZXRUYW5nZW50ID0gb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZC5kYXRhKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldH0sICR7b2Zmc2V0VGFuZ2VudH0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldFRhbmdlbnR9LCAke29mZnNldH0pYDtcbiAgICAgIH0pO1xuXG4gICAgcGF0aHNcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5hdHRyKCdkJywgZCA9PiByZW5kZXJlci5nZW5lcmF0ZVBhdGgoZCkpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gbGlua0NvbG9yKGQuZGF0YSkpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXRGbihkLmRhdGEpO1xuICAgICAgICBjb25zdCBvZmZzZXRUYW5nZW50ID0gb3B0aW9ucy5vZmZzZXRUYW5nZW50Rm4oZC5kYXRhKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldH0sICR7b2Zmc2V0VGFuZ2VudH0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke29mZnNldFRhbmdlbnR9LCAke29mZnNldH0pYDtcbiAgICAgIH0pO1xuXG4gICAgcGF0aHMuZXhpdCgpLnJlbW92ZSgpO1xuICB9XG5cbiAgdmlzdWFsaXplKCkge1xuICAgIGlmICghdGhpcy5oYXNEYXRhKCkgfHwgIXRoaXMuaGFzTm9uWmVyb0FyZWEoKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YSgpIHx8IFtdO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMoKTtcbiAgICB0aGlzLmZvcmNlID0gbmV3IGxhYmVsbGEuRm9yY2Uob3B0aW9ucy5sYWJlbGxhKTtcblxuICAgIGlmIChvcHRpb25zLmRvbWFpbikge1xuICAgICAgb3B0aW9ucy5zY2FsZS5kb21haW4ob3B0aW9ucy5kb21haW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnNjYWxlLmRvbWFpbihleHRlbnQoZGF0YSwgb3B0aW9ucy50aW1lRm4pKS5uaWNlKCk7XG4gICAgfVxuICAgIG9wdGlvbnMuc2NhbGUucmFuZ2UoW1xuICAgICAgMCxcbiAgICAgIG9wdGlvbnMuZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgb3B0aW9ucy5kaXJlY3Rpb24gPT09ICdyaWdodCdcbiAgICAgICAgPyB0aGlzLmdldElubmVySGVpZ2h0KClcbiAgICAgICAgOiB0aGlzLmdldElubmVyV2lkdGgoKSxcbiAgICBdKTtcblxuICAgIGNvbnN0IGxhYmVsVGV4dFN0eWxlID0gaGVscGVyLmV4dGVuZCh7fSwgb3B0aW9ucy50ZXh0U3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGxhYmVsVGV4dFN0eWxlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGxhYmVsVGV4dFN0eWxlW2tleV0gPSBoZWxwZXIuZnVuY3RvcihsYWJlbFRleHRTdHlsZVtrZXldKTtcbiAgICB9KTtcbiAgICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgIGxhYmVsVGV4dFN0eWxlLmZpbGwgPSBsYWJlbFRleHRTdHlsZS5maWxsIHx8IGhlbHBlci5mdW5jdG9yKG9wdGlvbnMubGFiZWxUZXh0Q29sb3IpO1xuXG4gICAgY29uc3QgZHVtbXlUZXh0ID0gdGhpcy5sYXllcnNcbiAgICAgIC5nZXQoJ2R1bW15JylcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmNsYXNzZWQoJ2xhYmVsLXRleHQnLCB0cnVlKTtcblxuICAgIGNvbnN0IHRpbWVQb3MgPSBkID0+IG9wdGlvbnMuc2NhbGUob3B0aW9ucy50aW1lRm4oZCkpO1xuICAgIGNvbnN0IG5vZGVzID0gZGF0YS5tYXAoKGQpID0+IHtcbiAgICAgIGNvbnN0IGJib3ggPSBkdW1teVRleHRcbiAgICAgICAgLmNhbGwodGhpcy51cGRhdGVMYWJlbFRleHQsIGxhYmVsVGV4dFN0eWxlLCBkKVxuICAgICAgICAubm9kZSgpXG4gICAgICAgIC5nZXRCQm94KCk7XG4gICAgICBjb25zdCB3ID0gYmJveC53aWR0aCArIG9wdGlvbnMubGFiZWxQYWRkaW5nLmxlZnQgKyBvcHRpb25zLmxhYmVsUGFkZGluZy5yaWdodDtcbiAgICAgIGNvbnN0IGggPSBiYm94LmhlaWdodCArIG9wdGlvbnMubGFiZWxQYWRkaW5nLnRvcCArIG9wdGlvbnMubGFiZWxQYWRkaW5nLmJvdHRvbTtcbiAgICAgIGNvbnN0IG5vZGUgPSBuZXcgbGFiZWxsYS5Ob2RlKFxuICAgICAgICB0aW1lUG9zKGQpLFxuICAgICAgICBvcHRpb25zLmRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IG9wdGlvbnMuZGlyZWN0aW9uID09PSAncmlnaHQnID8gaCA6IHcsXG4gICAgICAgIGQsXG4gICAgICApO1xuICAgICAgbm9kZS53ID0gdztcbiAgICAgIG5vZGUuaCA9IGg7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9KTtcblxuICAgIGR1bW15VGV4dC5yZW1vdmUoKTtcblxuICAgIHRoaXMuZm9yY2VcbiAgICAgIC5vcHRpb25zKG9wdGlvbnMubGFiZWxsYSlcbiAgICAgIC5ub2Rlcyhub2RlcylcbiAgICAgIC5jb21wdXRlKCk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhub2Rlcyk7XG4gICAgdGhpcy5kcmF3QXhlcygpO1xuICAgIHRoaXMuZHJhd0RvdHMoZGF0YSk7XG4gICAgdGhpcy5kcmF3TGFiZWxzKHRoaXMuZm9yY2Uubm9kZXMoKSwgbGFiZWxUZXh0U3R5bGUpO1xuICAgIHRoaXMuZHJhd0xpbmtzKHRoaXMuZm9yY2Uubm9kZXMoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaW1lbGluZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=